import{a8 as i,ai as e}from"./index-CMbtiFzm.js";import{a}from"./index-xsH4HHeE.js";const o="http://localhost:3001/api/products",n=i("productStore",{state:()=>({products:[]}),actions:{async loadProducts(){try{const{data:t}=await a.get(o);this.products=t}catch{e.create({type:"negative",message:"Erro ao carregar produtos."})}},async addProduct(t){try{await a.post(o,t),await this.loadProducts(),e.create({type:"positive",message:`Produto "${t.name}" adicionado!`})}catch{e.create({type:"negative",message:"Erro ao adicionar produto."})}},async deleteProduct(t){try{await a.delete(`${o}/${t}`),await this.loadProducts(),e.create({type:"positive",message:"Produto excluído com sucesso!"})}catch{e.create({type:"negative",message:"Erro ao excluir produto."})}},async restockProduct(t,s){try{const r=this.products.find(c=>c.id===t);if(!r){e.create({type:"negative",message:"Produto não encontrado."});return}await a.put(`${o}/${t}`,{quantity:r.quantity+s}),await this.loadProducts(),e.create({type:"positive",message:`Produto "${r.name}" reabastecido!`})}catch{e.create({type:"negative",message:"Erro ao reabastecer produto."})}}}});export{n as u};
