import{aa as i,ak as a}from"./index-DhQyY180.js";import{a as e}from"./index-xsH4HHeE.js";const o="http://localhost:3001/api/products",n=i("productStore",{state:()=>({products:[]}),actions:{async loadProducts(){try{const{data:t}=await e.get(o);this.products=t}catch{a.create({type:"negative",message:"Erro ao carregar produtos."})}},async addProduct(t){try{await e.post(o,t),await this.loadProducts(),a.create({type:"positive",message:`Produto "${t.name}" adicionado!`})}catch{a.create({type:"negative",message:"Erro ao adicionar produto."})}},async deleteProduct(t){try{await e.delete(`${o}/${t}`),await this.loadProducts(),a.create({type:"positive",message:"Produto excluído com sucesso!"})}catch{a.create({type:"negative",message:"Erro ao excluir produto."})}},async restockProduct(t,s){try{const r=this.products.find(c=>c.id===t);if(!r){a.create({type:"negative",message:"Produto não encontrado."});return}await e.put(`${o}/${t}`,{quantity:r.quantity+s}),await this.loadProducts(),a.create({type:"positive",message:`Produto "${r.name}" reabastecido!`})}catch{a.create({type:"negative",message:"Erro ao reabastecer produto."})}}}});export{n as u};
